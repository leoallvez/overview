jacoco {
    toolVersion "0.8.8"
}

task jacocoTestReport(
    type: JacocoReport,
    dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']
) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."

    reports {
        xml.enabled true
        html.enabled true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfing.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            
            'androidx/**/*.*',
            '**/view/*.*',
            '**/data/*.*',
            '**/data/model/*.*',
            '**/generated/callback/*.*',
            '**/lambda$*.class',
            '**/lambda.class',
            '**/*lambda.class',
            '**/*lambda*.class'
    ]

    def dir = "${project.buildDir}/intermediates/javac/debug/classes"
    def debugTree = fileTree(dir: dir, excludes: fileFilter)

    def mainSrc = "/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: "$project.buildDir", includes:["/jacoco/testDebugUnitTest.exec"])

    doLast {
        println "\n\t COVERAGE REPORT GENERATED: \n\tfile://${report.html.destination}"
    }
}
